{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/lib/db.js"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\r\n\r\n// Create a Neon serverless client\r\nconst sql = neon(process.env.NEON_DATABASE_URL, {\r\n  // Optional: Configure fetch options for the Neon driver\r\n  fetchOptions: {\r\n    cache: 'no-store', // Prevent caching for serverless environments\r\n  },\r\n});\r\n\r\n// Generic query function\r\nexport async function query(text, params = []) {\r\n  try {\r\n    const result = await sql.query(text, params);\r\n    // Return result in a pg-compatible format\r\n    return { rows: result };\r\n  } catch (err) {\r\n    console.error('Database query error:', err.message);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// For server components (mimics pg client behavior)\r\nexport async function getClient() {\r\n  // Neon driver doesn't use traditional connections, so return a client-like object\r\n  return {\r\n    query: async (text, params = []) => {\r\n      try {\r\n        const result = await sql.query(text, params);\r\n        return { rows: result };\r\n      } catch (err) {\r\n        console.error('Database query error:', err.message);\r\n        throw err;\r\n      }\r\n    },\r\n    release: () => {\r\n      // No-op since Neon driver doesn't use connection pooling\r\n    },\r\n  };\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,kCAAkC;AAClC,MAAM,MAAM,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAC9C,wDAAwD;IACxD,cAAc;QACZ,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,SAAS,EAAE;IAC3C,IAAI;QACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;QACrC,0CAA0C;QAC1C,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;QAClD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,kFAAkF;IAClF,OAAO;QACL,OAAO,OAAO,MAAM,SAAS,EAAE;YAC7B,IAAI;gBACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;gBACrC,OAAO;oBAAE,MAAM;gBAAO;YACxB,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;gBAClD,MAAM;YACR;QACF;QACA,SAAS;QACP,yDAAyD;QAC3D;IACF;AACF","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/app/api/edit_amount/route.js"],"sourcesContent":["import { getClient } from '@/lib/db';\r\nimport { NextResponse } from 'next/server';\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const { user_id, selectedPlan, bill_no, totalAmountReceived, discount, balance, trainer } = await request.json();\r\n\r\n    // Validate input data\r\n    if (!user_id || !selectedPlan || !bill_no || totalAmountReceived == null || discount == null || balance == null || trainer == null) {\r\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\r\n    }\r\n\r\n    const client = await getClient();\r\n    \r\n    try {\r\n      // Update existing record in user_balances table\r\n      const queryText = `\r\n        UPDATE membership_plans \r\n        SET \r\n          amount = $1,\r\n          discount = $2,\r\n          balance = $3,\r\n          trainer = $7\r\n        WHERE user_id = $4 AND plan_name = $5 AND bill_no = $6\r\n        RETURNING *;\r\n      `;\r\n      \r\n      const values = [totalAmountReceived, discount, balance, user_id, selectedPlan, bill_no, trainer];\r\n      \r\n      const result = await client.query(queryText, values);\r\n      \r\n      if (result.rowCount === 0) {\r\n        return NextResponse.json({ error: 'No matching record found to update' }, { status: 404 });\r\n      }\r\n      \r\n      return NextResponse.json({\r\n        message: 'Balance updated successfully',\r\n        data: result.rows[0]\r\n      }, { status: 200 });\r\n      \r\n    } finally {\r\n    //   await client.end();\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating balance:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9G,sBAAsB;QACtB,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,uBAAuB,QAAQ,YAAY,QAAQ,WAAW,QAAQ,WAAW,MAAM;YAClI,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,YAAS,AAAD;QAE7B,IAAI;YACF,gDAAgD;YAChD,MAAM,YAAY,CAAC;;;;;;;;;MASnB,CAAC;YAED,MAAM,SAAS;gBAAC;gBAAqB;gBAAU;gBAAS;gBAAS;gBAAc;gBAAS;aAAQ;YAEhG,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,WAAW;YAE7C,IAAI,OAAO,QAAQ,KAAK,GAAG;gBACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAqC,GAAG;oBAAE,QAAQ;gBAAI;YAC1F;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,MAAM,OAAO,IAAI,CAAC,EAAE;YACtB,GAAG;gBAAE,QAAQ;YAAI;QAEnB,SAAU;QACV,wBAAwB;QACxB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}