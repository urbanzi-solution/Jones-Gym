{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/lib/db.js"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\r\n\r\n// Create a Neon serverless client\r\nconst sql = neon(process.env.NEON_DATABASE_URL, {\r\n  // Optional: Configure fetch options for the Neon driver\r\n  fetchOptions: {\r\n    cache: 'no-store', // Prevent caching for serverless environments\r\n  },\r\n});\r\n\r\n// Generic query function\r\nexport async function query(text, params = []) {\r\n  try {\r\n    const result = await sql.query(text, params);\r\n    // Return result in a pg-compatible format\r\n    return { rows: result };\r\n  } catch (err) {\r\n    console.error('Database query error:', err.message);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// For server components (mimics pg client behavior)\r\nexport async function getClient() {\r\n  // Neon driver doesn't use traditional connections, so return a client-like object\r\n  return {\r\n    query: async (text, params = []) => {\r\n      try {\r\n        const result = await sql.query(text, params);\r\n        return { rows: result };\r\n      } catch (err) {\r\n        console.error('Database query error:', err.message);\r\n        throw err;\r\n      }\r\n    },\r\n    release: () => {\r\n      // No-op since Neon driver doesn't use connection pooling\r\n    },\r\n  };\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,kCAAkC;AAClC,MAAM,MAAM,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAC9C,wDAAwD;IACxD,cAAc;QACZ,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,SAAS,EAAE;IAC3C,IAAI;QACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;QACrC,0CAA0C;QAC1C,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;QAClD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,kFAAkF;IAClF,OAAO;QACL,OAAO,OAAO,MAAM,SAAS,EAAE;YAC7B,IAAI;gBACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;gBACrC,OAAO;oBAAE,MAAM;gBAAO;YACxB,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;gBAClD,MAAM;YACR;QACF;QACA,SAAS;QACP,yDAAyD;QAC3D;IACF;AACF","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/app/api/fetch_transactions/route.js"],"sourcesContent":["import { getClient } from \"@/lib/db\";\r\n\r\nexport async function GET(request) {\r\n  const client = await getClient();\r\n  try {\r\n    // Extract user_id from query parameters\r\n    const { searchParams } = new URL(request.url);\r\n    const userId = searchParams.get('user_id');\r\n\r\n    if (!userId) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'user_id is required'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    const query = `\r\n      SELECT mp.*, ud.name \r\n      FROM membership_plans mp\r\n      JOIN user_data ud ON mp.user_id = ud.user_id\r\n      WHERE mp.user_id = $1\r\n      ORDER BY mp.date DESC;\r\n    `;\r\n\r\n    const result = await client.query(query, [userId]);\r\n\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      data: result.rows\r\n    }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"Error fetching transactions:\", error);\r\n    return new Response(JSON.stringify({\r\n      error: error.message || \"Failed to fetch transactions\"\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } finally {\r\n    await client.release();\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IAAI,OAAO;IAC/B,MAAM,SAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,YAAS,AAAD;IAC7B,IAAI;QACF,wCAAwC;QACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,IAAI,CAAC,QAAQ;YACX,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBACjC,SAAS;gBACT,OAAO;YACT,IAAI;gBACF,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QACF;QAEA,MAAM,QAAQ,CAAC;;;;;;IAMf,CAAC;QAED,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,OAAO;YAAC;SAAO;QAEjD,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YACjC,SAAS;YACT,MAAM,OAAO,IAAI;QACnB,IAAI;YACF,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YACjC,OAAO,MAAM,OAAO,IAAI;QAC1B,IAAI;YACF,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,SAAU;QACR,MAAM,OAAO,OAAO;IACtB;AACF","debugId":null}}]
}