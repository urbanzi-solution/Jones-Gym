{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/lib/db.js"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\r\n\r\n// Create a Neon serverless client\r\nconst sql = neon(process.env.NEON_DATABASE_URL, {\r\n  // Optional: Configure fetch options for the Neon driver\r\n  fetchOptions: {\r\n    cache: 'no-store', // Prevent caching for serverless environments\r\n  },\r\n});\r\n\r\n// Generic query function\r\nexport async function query(text, params = []) {\r\n  try {\r\n    const result = await sql.query(text, params);\r\n    // Return result in a pg-compatible format\r\n    return { rows: result };\r\n  } catch (err) {\r\n    console.error('Database query error:', err.message);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// For server components (mimics pg client behavior)\r\nexport async function getClient() {\r\n  // Neon driver doesn't use traditional connections, so return a client-like object\r\n  return {\r\n    query: async (text, params = []) => {\r\n      try {\r\n        const result = await sql.query(text, params);\r\n        return { rows: result };\r\n      } catch (err) {\r\n        console.error('Database query error:', err.message);\r\n        throw err;\r\n      }\r\n    },\r\n    release: () => {\r\n      // No-op since Neon driver doesn't use connection pooling\r\n    },\r\n  };\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,kCAAkC;AAClC,MAAM,MAAM,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAC9C,wDAAwD;IACxD,cAAc;QACZ,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,SAAS,EAAE;IAC3C,IAAI;QACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;QACrC,0CAA0C;QAC1C,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;QAClD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,kFAAkF;IAClF,OAAO;QACL,OAAO,OAAO,MAAM,SAAS,EAAE;YAC7B,IAAI;gBACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;gBACrC,OAAO;oBAAE,MAAM;gBAAO;YACxB,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;gBAClD,MAAM;YACR;QACF;QACA,SAAS;QACP,yDAAyD;QAC3D;IACF;AACF","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/app/api/renew-membership/route.js"],"sourcesContent":["import { getClient } from '@/lib/db';\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const client = await getClient();\r\n    const data = await request.json();\r\n    const { user_id, plan_name, bill_no, amount, discount, balance, trans_type, trainer_id, date, exp_date } = data;\r\n\r\n    console.log('Received data:', data);\r\n\r\n    // Validate required fields\r\n    if (!user_id || !plan_name || !amount) {\r\n      return new Response(JSON.stringify({ error: 'User ID, plan name, and amount are required' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n    }\r\n\r\n    // Parse numeric fields to integers\r\n    const parsedAmount = parseInt(amount, 10);\r\n    const parsedDiscount = parseInt(discount, 10) || 0;\r\n    const parsedBalance = parseInt(balance, 10);\r\n\r\n    // Validate parsed values\r\n    if (isNaN(parsedAmount) || isNaN(parsedBalance)) {\r\n      return new Response(JSON.stringify({ error: 'Amount and balance must be valid numbers' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n    }\r\n\r\n    // Insert data into the database\r\n    const queryText = `\r\n      INSERT INTO membership_plans (user_id, plan_name, bill_no, amount, discount, balance, trans_type, trainer, date, exp_date)\r\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n      RETURNING user_id\r\n    `;\r\n    const values = [\r\n      user_id,\r\n      plan_name,\r\n      bill_no || null,\r\n      parsedAmount,\r\n      parsedDiscount,\r\n      parsedBalance,\r\n      trans_type || null,\r\n      trainer_id || null,\r\n      date || null,\r\n      exp_date || null\r\n    ];\r\n\r\n    const result = await client.query(queryText, values);\r\n\r\n    return new Response(JSON.stringify({ message: 'Renewal saved successfully', user_id: result.rows[0].user_id }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error saving renewal:', error);\r\n    return new Response(JSON.stringify({ error: 'Failed to save renewal', details: error.message }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,YAAS,AAAD;QAC7B,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG;QAE3G,QAAQ,GAAG,CAAC,kBAAkB;QAE9B,2BAA2B;QAC3B,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ;YACrC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAA8C,IAAI;gBAC5F,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QACF;QAEA,mCAAmC;QACnC,MAAM,eAAe,SAAS,QAAQ;QACtC,MAAM,iBAAiB,SAAS,UAAU,OAAO;QACjD,MAAM,gBAAgB,SAAS,SAAS;QAExC,yBAAyB;QACzB,IAAI,MAAM,iBAAiB,MAAM,gBAAgB;YAC/C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAA2C,IAAI;gBACzF,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QACF;QAEA,gCAAgC;QAChC,MAAM,YAAY,CAAC;;;;IAInB,CAAC;QACD,MAAM,SAAS;YACb;YACA;YACA,WAAW;YACX;YACA;YACA;YACA,cAAc;YACd,cAAc;YACd,QAAQ;YACR,YAAY;SACb;QAED,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,WAAW;QAE7C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAA8B,SAAS,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO;QAAC,IAAI;YAC9G,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;YAA0B,SAAS,MAAM,OAAO;QAAC,IAAI;YAC/F,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF;AACF","debugId":null}}]
}