{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/lib/db.js"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\r\n\r\n// Create a Neon serverless client\r\nconst sql = neon(process.env.NEON_DATABASE_URL, {\r\n  // Optional: Configure fetch options for the Neon driver\r\n  fetchOptions: {\r\n    cache: 'no-store', // Prevent caching for serverless environments\r\n  },\r\n});\r\n\r\n// Generic query function\r\nexport async function query(text, params = []) {\r\n  try {\r\n    const result = await sql.query(text, params);\r\n    // Return result in a pg-compatible format\r\n    return { rows: result };\r\n  } catch (err) {\r\n    console.error('Database query error:', err.message);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// For server components (mimics pg client behavior)\r\nexport async function getClient() {\r\n  // Neon driver doesn't use traditional connections, so return a client-like object\r\n  return {\r\n    query: async (text, params = []) => {\r\n      try {\r\n        const result = await sql.query(text, params);\r\n        return { rows: result };\r\n      } catch (err) {\r\n        console.error('Database query error:', err.message);\r\n        throw err;\r\n      }\r\n    },\r\n    release: () => {\r\n      // No-op since Neon driver doesn't use connection pooling\r\n    },\r\n  };\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,kCAAkC;AAClC,MAAM,MAAM,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAC9C,wDAAwD;IACxD,cAAc;QACZ,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,SAAS,EAAE;IAC3C,IAAI;QACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;QACrC,0CAA0C;QAC1C,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;QAClD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,kFAAkF;IAClF,OAAO;QACL,OAAO,OAAO,MAAM,SAAS,EAAE;YAC7B,IAAI;gBACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;gBACrC,OAAO;oBAAE,MAAM;gBAAO;YACxB,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;gBAClD,MAAM;YACR;QACF;QACA,SAAS;QACP,yDAAyD;QAC3D;IACF;AACF","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/app/api/login/route.js"],"sourcesContent":["import { getClient } from '@/lib/db';\r\nimport { NextResponse } from 'next/server';\r\nimport bcrypt from 'bcrypt';\r\n\r\nexport async function POST(request) {\r\n  let client;\r\n  \r\n  try {\r\n    // Parse the request body\r\n    const { username, password } = await request.json();\r\n\r\n    // Validate input\r\n    if (!username || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Username and password are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Get database client\r\n    client = await getClient();\r\n\r\n    // Query user from database\r\n    const query = 'SELECT username, password FROM user_cred WHERE username = $1';\r\n    const result = await client.query(query, [username]);\r\n\r\n    // Check if user exists\r\n    if (result.rows.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Username or password incorrect' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const user = result.rows[0];\r\n\r\n    // Compare password with hash using bcrypt\r\n    const passwordMatch = await bcrypt.compare(password, user.password);\r\n\r\n    if (!passwordMatch) {\r\n      return NextResponse.json(\r\n        { error: 'Username or password incorrect' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Login successful\r\n    return NextResponse.json(\r\n      { \r\n        success: true, \r\n        message: 'Login successful',\r\n        username: user.username \r\n      },\r\n      { status: 200 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    // Release the client back to the pool\r\n    if (client) {\r\n      client.release();\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;IAEJ,IAAI;QACF,yBAAyB;QACzB,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEjD,iBAAiB;QACjB,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqC,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,SAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,YAAS,AAAD;QAEvB,2BAA2B;QAC3B,MAAM,QAAQ;QACd,MAAM,SAAS,MAAM,OAAO,KAAK,CAAC,OAAO;YAAC;SAAS;QAEnD,uBAAuB;QACvB,IAAI,OAAO,IAAI,CAAC,MAAM,KAAK,GAAG;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,OAAO,IAAI,CAAC,EAAE;QAE3B,0CAA0C;QAC1C,MAAM,gBAAgB,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAElE,IAAI,CAAC,eAAe;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,mBAAmB;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;YACT,UAAU,KAAK,QAAQ;QACzB,GACA;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,sCAAsC;QACtC,IAAI,QAAQ;YACV,OAAO,OAAO;QAChB;IACF;AACF","debugId":null}}]
}