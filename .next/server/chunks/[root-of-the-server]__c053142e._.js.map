{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/lib/db.js"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\r\n\r\n// Create a Neon serverless client\r\nconst sql = neon(process.env.NEON_DATABASE_URL, {\r\n  // Optional: Configure fetch options for the Neon driver\r\n  fetchOptions: {\r\n    cache: 'no-store', // Prevent caching for serverless environments\r\n  },\r\n});\r\n\r\n// Generic query function\r\nexport async function query(text, params = []) {\r\n  try {\r\n    const result = await sql.query(text, params);\r\n    // Return result in a pg-compatible format\r\n    return { rows: result };\r\n  } catch (err) {\r\n    console.error('Database query error:', err.message);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// For server components (mimics pg client behavior)\r\nexport async function getClient() {\r\n  // Neon driver doesn't use traditional connections, so return a client-like object\r\n  return {\r\n    query: async (text, params = []) => {\r\n      try {\r\n        const result = await sql.query(text, params);\r\n        return { rows: result };\r\n      } catch (err) {\r\n        console.error('Database query error:', err.message);\r\n        throw err;\r\n      }\r\n    },\r\n    release: () => {\r\n      // No-op since Neon driver doesn't use connection pooling\r\n    },\r\n  };\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,kCAAkC;AAClC,MAAM,MAAM,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAC9C,wDAAwD;IACxD,cAAc;QACZ,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,SAAS,EAAE;IAC3C,IAAI;QACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;QACrC,0CAA0C;QAC1C,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;QAClD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,kFAAkF;IAClF,OAAO;QACL,OAAO,OAAO,MAAM,SAAS,EAAE;YAC7B,IAAI;gBACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;gBACrC,OAAO;oBAAE,MAAM;gBAAO;YACxB,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;gBAClD,MAAM;YACR;QACF;QACA,SAAS;QACP,yDAAyD;QAC3D;IACF;AACF","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/app/api/fetch_remark_blcklist/route.js"],"sourcesContent":["//src\\app\\api\\fetch_remark_blcklist\\route.js\r\nimport { getClient } from '@/lib/db';\r\nimport { NextResponse } from 'next/server';\r\n\r\nexport async function GET() {\r\n  try {\r\n    const client = await getClient();\r\n    \r\n    // Fetch data from both tables using a LEFT JOIN\r\n    const { rows } = await client.query(`\r\n      SELECT ur.user_id, ur.remark, bl.description AS blacklist_description\r\n      FROM user_Remark ur\r\n      LEFT JOIN Blacklist bl ON ur.user_id = bl.user_id\r\n    `);\r\n    \r\n    // Map database fields to match frontend expectations\r\n    const results = rows.map(row => ({\r\n      userId: row.user_id,\r\n      remark: row.remark,\r\n      blacklistDescription: row.blacklist_description || null\r\n    }));\r\n\r\n    return NextResponse.json(results);\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"AAAA,4CAA4C;;;;AAC5C;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,YAAS,AAAD;QAE7B,gDAAgD;QAChD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,OAAO,KAAK,CAAC,CAAC;;;;IAIrC,CAAC;QAED,qDAAqD;QACrD,MAAM,UAAU,KAAK,GAAG,CAAC,CAAA,MAAO,CAAC;gBAC/B,QAAQ,IAAI,OAAO;gBACnB,QAAQ,IAAI,MAAM;gBAClB,sBAAsB,IAAI,qBAAqB,IAAI;YACrD,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}