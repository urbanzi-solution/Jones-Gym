{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/lib/db.js"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\r\n\r\n// Create a Neon serverless client\r\nconst sql = neon(process.env.NEON_DATABASE_URL, {\r\n  // Optional: Configure fetch options for the Neon driver\r\n  fetchOptions: {\r\n    cache: 'no-store', // Prevent caching for serverless environments\r\n  },\r\n});\r\n\r\n// Generic query function\r\nexport async function query(text, params = []) {\r\n  try {\r\n    const result = await sql.query(text, params);\r\n    // Return result in a pg-compatible format\r\n    return { rows: result };\r\n  } catch (err) {\r\n    console.error('Database query error:', err.message);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// For server components (mimics pg client behavior)\r\nexport async function getClient() {\r\n  // Neon driver doesn't use traditional connections, so return a client-like object\r\n  return {\r\n    query: async (text, params = []) => {\r\n      try {\r\n        const result = await sql.query(text, params);\r\n        return { rows: result };\r\n      } catch (err) {\r\n        console.error('Database query error:', err.message);\r\n        throw err;\r\n      }\r\n    },\r\n    release: () => {\r\n      // No-op since Neon driver doesn't use connection pooling\r\n    },\r\n  };\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,kCAAkC;AAClC,MAAM,MAAM,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAC9C,wDAAwD;IACxD,cAAc;QACZ,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,SAAS,EAAE;IAC3C,IAAI;QACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;QACrC,0CAA0C;QAC1C,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;QAClD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,kFAAkF;IAClF,OAAO;QACL,OAAO,OAAO,MAAM,SAAS,EAAE;YAC7B,IAAI;gBACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;gBACrC,OAAO;oBAAE,MAAM;gBAAO;YACxB,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;gBAClD,MAAM;YACR;QACF;QACA,SAAS;QACP,yDAAyD;QAC3D;IACF;AACF","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/app/api/members/route.js"],"sourcesContent":["import { getClient } from '@/lib/db'\r\nimport { NextResponse } from 'next/server';\r\n\r\nexport async function POST(request) {\r\n  let client;\r\n  try {\r\n    const data = await request.json();\r\n    const {\r\n      gym_id,\r\n      full_name,\r\n      gender,\r\n      weight,\r\n      dob,\r\n      about,\r\n      location,\r\n      phone,\r\n      whatsapp,\r\n      join_date,\r\n      membership_plans = [],\r\n    } = data;\r\n\r\n    // console.log(\"ðŸš€ Received data from frontend:\", data);\r\n\r\n    // Get database client\r\n    client = await getClient();\r\n\r\n    // Begin transaction\r\n    await client.query('BEGIN');\r\n\r\n    // Insert into user_data\r\n    const query = `\r\n      INSERT INTO user_data (\r\n        user_id,\r\n        name,\r\n        gender,\r\n        weight,\r\n        date_of_birth,\r\n        about,\r\n        location,\r\n        phone_no,\r\n        whatsapp_no,\r\n        joining_date\r\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n      RETURNING *\r\n    `;\r\n    \r\n    const values = [\r\n      gym_id,\r\n      full_name,\r\n      gender,\r\n      weight,\r\n      dob,\r\n      about,\r\n      location,\r\n      phone,\r\n      whatsapp,\r\n      join_date,\r\n    ];\r\n\r\n    const result = await client.query(query, values);\r\n\r\n    // Insert membership plans if any\r\n    if (membership_plans.length > 0) {\r\n      const planInsertQuery = `\r\n        INSERT INTO membership_plans (\r\n          user_id, plan_name, bill_no, amount, discount, balance, trans_type, trainer, date, exp_date\r\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n      `;\r\n\r\n      for (const plan of membership_plans) {\r\n        const { plan_name, amount, discount, balance, transaction_type, bill_no, trainer, join_date: planJoinDate, expiry_date } = plan;\r\n        const parsedAmount = parseInt(amount);\r\n        const parsedDiscount = parseInt(discount);\r\n        const parsedBalance = parseInt(balance);\r\n\r\n        await client.query(planInsertQuery, [\r\n          gym_id,\r\n          plan_name || null,\r\n          bill_no || null,\r\n          isNaN(parsedAmount) ? null : parsedAmount,\r\n          isNaN(parsedDiscount) ? null : parsedDiscount,\r\n          isNaN(parsedBalance) ? null : parsedBalance,\r\n          transaction_type || null,\r\n          trainer || null,\r\n          planJoinDate || join_date || null,\r\n          expiry_date || null,\r\n        ]);\r\n      }\r\n    }\r\n\r\n    // Commit transaction\r\n    await client.query('COMMIT');\r\n\r\n    return new Response(JSON.stringify({\r\n      message: 'Member added successfully',\r\n      data: result.rows[0],\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n\r\n  } catch (error) {\r\n    if (client) {\r\n      await client.query('ROLLBACK');\r\n    }\r\n    console.error('Error adding member:', error);\r\n    return new Response(JSON.stringify({\r\n      error: 'Failed to add member',\r\n      details: error.message,\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  } finally {\r\n    if (client) {\r\n      await client.release();\r\n    }\r\n  }\r\n}\r\n\r\nexport async function GET(request) {\r\n  const client = await getClient();\r\n  try {\r\n    // Fetch plan names from plans table\r\n    const plansQuery = 'SELECT plan_name, duration, amount FROM plans WHERE status = $1';\r\n    const plansResult = await client.query(plansQuery, ['active']);\r\n    const plans = plansResult.rows.map(row => ({\r\n      plan_name: row.plan_name,\r\n      duration: row.duration,\r\n      amount: row.amount\r\n      }));\r\n\r\n    // console.log(plans);\r\n\r\n    // Fetch trainer id and name from trainers table\r\n    const trainersQuery = 'SELECT trainer_id, name FROM trainers';\r\n    const trainersResult = await client.query(trainersQuery);\r\n    const trainers = trainersResult.rows.map(row => ({\r\n      trainer_id: row.trainer_id,\r\n      name: row.name\r\n    }));\r\n\r\n    return NextResponse.json({\r\n      plansResult,\r\n      plans,\r\n      trainers\r\n    }, { status: 200 });\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal Server Error' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    // await client.end();\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}