{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/lib/db.js"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\r\n\r\n// Create a Neon serverless client\r\nconst sql = neon(process.env.NEON_DATABASE_URL, {\r\n  // Optional: Configure fetch options for the Neon driver\r\n  fetchOptions: {\r\n    cache: 'no-store', // Prevent caching for serverless environments\r\n  },\r\n});\r\n\r\n// Generic query function\r\nexport async function query(text, params = []) {\r\n  try {\r\n    const result = await sql.query(text, params);\r\n    // Return result in a pg-compatible format\r\n    return { rows: result };\r\n  } catch (err) {\r\n    console.error('Database query error:', err.message);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// For server components (mimics pg client behavior)\r\nexport async function getClient() {\r\n  // Neon driver doesn't use traditional connections, so return a client-like object\r\n  return {\r\n    query: async (text, params = []) => {\r\n      try {\r\n        const result = await sql.query(text, params);\r\n        return { rows: result };\r\n      } catch (err) {\r\n        console.error('Database query error:', err.message);\r\n        throw err;\r\n      }\r\n    },\r\n    release: () => {\r\n      // No-op since Neon driver doesn't use connection pooling\r\n    },\r\n  };\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,kCAAkC;AAClC,MAAM,MAAM,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAC9C,wDAAwD;IACxD,cAAc;QACZ,OAAO;IACT;AACF;AAGO,eAAe,MAAM,IAAI,EAAE,SAAS,EAAE;IAC3C,IAAI;QACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;QACrC,0CAA0C;QAC1C,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;QAClD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,kFAAkF;IAClF,OAAO;QACL,OAAO,OAAO,MAAM,SAAS,EAAE;YAC7B,IAAI;gBACF,MAAM,SAAS,MAAM,IAAI,KAAK,CAAC,MAAM;gBACrC,OAAO;oBAAE,MAAM;gBAAO;YACxB,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,yBAAyB,IAAI,OAAO;gBAClD,MAAM;YACR;QACF;QACA,SAAS;QACP,yDAAyD;QAC3D;IACF;AACF","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/app/api/fetch_attendance/route.js"],"sourcesContent":["// src\\app\\api\\fetch_attendance\\route.js\r\nimport { getClient } from '@/lib/db';\r\nimport { NextResponse } from 'next/server';\r\n\r\nexport async function GET() {\r\n  try {\r\n    const client = await getClient();\r\n    const { rows } = await client.query('SELECT * FROM trainer_attendance ORDER BY user_id');\r\n\r\n    const attendance = rows.map((row, index) => ({\r\n      trainer_id: row.trainer_id,\r\n      user_id: row.user_id,\r\n      date: row.date,\r\n      status: row.status,\r\n    }));\r\n\r\n    // console.log('Fetched attendance data:', attendance);\r\n    return NextResponse.json({ success: true, data: attendance });\r\n  } catch (error) {\r\n    console.error('Error fetching attendance data:', error);\r\n    return NextResponse.json({ success: false, error: 'Failed to fetch attendance data' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"AAAA,wCAAwC;;;;AACxC;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,YAAS,AAAD;QAC7B,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,OAAO,KAAK,CAAC;QAEpC,MAAM,aAAa,KAAK,GAAG,CAAC,CAAC,KAAK,QAAU,CAAC;gBAC3C,YAAY,IAAI,UAAU;gBAC1B,SAAS,IAAI,OAAO;gBACpB,MAAM,IAAI,IAAI;gBACd,QAAQ,IAAI,MAAM;YACpB,CAAC;QAED,uDAAuD;QACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM;QAAW;IAC7D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO;QAAkC,GAAG;YAAE,QAAQ;QAAI;IACvG;AACF","debugId":null}}]
}