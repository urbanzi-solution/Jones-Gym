{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/components/Inpage_header.jsx"],"sourcesContent":["\"use client\";\r\nimport { useRouter } from 'next/navigation';\r\nimport { LuUndo2 } from \"react-icons/lu\";\r\nimport { CiExport } from \"react-icons/ci\";\r\n\r\nexport default function Inpage_header({ title, onExport }) {\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <div className=\"flex text-2xl md:text-4xl p-4 md:p-6 lg:p-10 justify-between items-center\">\r\n      <a href=\"#\" onClick={(e) => { e.preventDefault(); router.back(); }}>\r\n        <LuUndo2 className=\"text-[#FFDD4A]\" />\r\n      </a>\r\n      <h1 className=\"text-center w-full font-bold\">{title}</h1>\r\n      <a href=\"#\" onClick={(e) => { e.preventDefault(); onExport(); }}>\r\n        <CiExport className=\"text-[#FFDD4A]\" />\r\n      </a>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;AAHA;;;;AAKe,SAAS,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE;;IACvD,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAE,MAAK;gBAAI,SAAS,CAAC;oBAAQ,EAAE,cAAc;oBAAI,OAAO,IAAI;gBAAI;0BAC/D,cAAA,6LAAC,iJAAA,CAAA,UAAO;oBAAC,WAAU;;;;;;;;;;;0BAErB,6LAAC;gBAAG,WAAU;0BAAgC;;;;;;0BAC9C,6LAAC;gBAAE,MAAK;gBAAI,SAAS,CAAC;oBAAQ,EAAE,cAAc;oBAAI;gBAAY;0BAC5D,cAAA,6LAAC,iJAAA,CAAA,WAAQ;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAI5B;GAdwB;;QACP,qIAAA,CAAA,YAAS;;;KADF","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/components/pt_attendance_table.jsx"],"sourcesContent":["'use client';\r\nimport { useEffect, useState } from 'react';\r\nimport Inpage_header from \"@/components/Inpage_header\";\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport default function PTAttendanceTable({ trainerId, name }) {\r\n  const [attendanceData, setAttendanceData] = useState([]);\r\n  const [existingAttendance, setExistingAttendance] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [attendance, setAttendance] = useState({});\r\n  const [saveStatus, setSaveStatus] = useState(null);\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth()); // Default to current month (0-11)\r\n\r\n  const options = [\r\n    'Select Month',\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December'\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Fetch membership plans (users)\r\n        const membersResponse = await fetch('/api/fetch_membership_plans');\r\n        const membersResult = await membersResponse.json();\r\n        \r\n        // Fetch existing attendance data\r\n        const attendanceResponse = await fetch('/api/fetch_attendance');\r\n        const attendanceResult = await attendanceResponse.json();\r\n\r\n        console.log('Members API response:', membersResult);\r\n        console.log('Attendance API response:', attendanceResult);\r\n\r\n        if (membersResult.success) {\r\n          // Filter members by trainer ID\r\n          const filteredMembers = membersResult.data.filter(\r\n            (record) => record.trainer === trainerId\r\n          );\r\n          console.log('Filtered members:', filteredMembers);\r\n          setAttendanceData(filteredMembers);\r\n          \r\n          // Filter existing attendance by trainer ID\r\n          const filteredAttendance = attendanceResult.data.filter(\r\n            (record) => record.trainer_id === trainerId\r\n          );\r\n          console.log('Filtered attendance:', filteredAttendance);\r\n          setExistingAttendance(filteredAttendance);\r\n        } else {\r\n          setError(membersResult.error || 'Failed to fetch data');\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n        setError('Error fetching data');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [trainerId]);\r\n\r\n  // Get days for the selected month\r\n  const getMonthDays = () => {\r\n    const now = new Date();\r\n    const year = now.getFullYear();\r\n    const daysInMonth = new Date(year, selectedMonth + 1, 0).getDate();\r\n    \r\n    return Array.from({ length: daysInMonth }, (_, i) => i + 1);\r\n  };\r\n\r\n  const monthDays = getMonthDays();\r\n  const currentMonth = selectedMonth >= 0 && selectedMonth < 12 \r\n    ? `${options[selectedMonth + 1]} ${new Date().getFullYear()}` \r\n    : 'Select a month';\r\n\r\n  // Initialize attendance state when data or selected month changes\r\n  useEffect(() => {\r\n    if (attendanceData.length > 0) {\r\n      const initialAttendance = {};\r\n      const currentYear = new Date().getFullYear();\r\n      const currentMonthNum = selectedMonth + 1; // 1-12 for comparison\r\n      \r\n      // Initialize attendance structure\r\n      attendanceData.forEach(user => {\r\n        initialAttendance[user.user_id] = {};\r\n        monthDays.forEach(day => {\r\n          initialAttendance[user.user_id][day] = ''; // Default empty\r\n        });\r\n      });\r\n\r\n      // Fill existing attendance data, converting UTC to IST\r\n      existingAttendance.forEach(record => {\r\n        // Convert UTC date to IST\r\n        const utcDate = new Date(record.date);\r\n        const istDate = new Date(utcDate.getTime() + (5.5 * 60 * 60 * 1000)); // Add 5.5 hours for IST\r\n        const recordYear = istDate.getFullYear();\r\n        const recordMonth = istDate.getMonth() + 1;\r\n        const recordDay = istDate.getDate();\r\n        \r\n        // Only fill if the record is from the selected month and year\r\n        if (recordYear === currentYear && recordMonth === currentMonthNum) {\r\n          if (initialAttendance[record.user_id]) {\r\n            initialAttendance[record.user_id][recordDay] = record.status;\r\n          }\r\n        }\r\n      });\r\n\r\n      setAttendance(initialAttendance);\r\n    }\r\n  }, [attendanceData, existingAttendance, selectedMonth]);\r\n\r\n  // Handle attendance change\r\n  const handleAttendanceChange = (userId, day, value) => {\r\n    setAttendance(prev => ({\r\n      ...prev,\r\n      [userId]: {\r\n        ...prev[userId],\r\n        [day]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  // Handle save button click\r\n  const handleSaveAttendance = async () => {\r\n    try {\r\n      setSaveStatus('Saving...');\r\n      const records = [];\r\n      const year = new Date().getFullYear();\r\n      const month = (selectedMonth + 1).toString().padStart(2, '0');\r\n\r\n      // Convert existingAttendance to a lookup for quick comparison\r\n      const existingAttendanceMap = {};\r\n      existingAttendance.forEach(record => {\r\n        const utcDate = new Date(record.date);\r\n        const istDate = new Date(utcDate.getTime() + (5.5 * 60 * 60 * 1000)); // Convert to IST\r\n        const recordYear = istDate.getFullYear();\r\n        const recordMonth = istDate.getMonth() + 1;\r\n        const recordDay = istDate.getDate();\r\n        if (recordYear === year && recordMonth === Number(month)) {\r\n          existingAttendanceMap[`${record.user_id}-${recordDay}`] = record.status;\r\n        }\r\n      });\r\n\r\n      // Collect only new or changed attendance records\r\n      Object.keys(attendance).forEach(userId => {\r\n        monthDays.forEach(day => {\r\n          const status = attendance[userId][day];\r\n          const key = `${userId}-${day}`;\r\n          const existingStatus = existingAttendanceMap[key];\r\n\r\n          // Include record if it's new (no existing status) or changed (different status)\r\n          if ((status === 'P' || status === 'A') && status !== existingStatus) {\r\n            const formattedDate = `${year}-${month}-${day.toString().padStart(2, '0')}`;\r\n            records.push({\r\n              trainer_id: trainerId,\r\n              user_id: userId,\r\n              date: formattedDate,\r\n              status: status\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      if (records.length === 0) {\r\n        setSaveStatus('No new or changed attendance data to save');\r\n        return;\r\n      }\r\n\r\n      const response = await fetch('/api/add_attendance', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ records })\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (result.success) {\r\n        setSaveStatus('Saved successfully');\r\n        // Update existingAttendance state to reflect saved changes\r\n        setExistingAttendance(prev => [\r\n          ...prev,\r\n          ...records.map(record => ({\r\n            trainer_id: record.trainer_id,\r\n            user_id: record.user_id,\r\n            date: record.date,\r\n            status: record.status\r\n          }))\r\n        ]);\r\n      } else {\r\n        setSaveStatus(`Failed: ${result.error}`);\r\n      }\r\n    } catch (error) {\r\n      setSaveStatus('Error saving');\r\n      console.error('Error saving attendance:', error);\r\n    } finally {\r\n      setTimeout(() => setSaveStatus(null), 3000);\r\n    }\r\n  };\r\n\r\n  // Handle export to Excel\r\n  const handleExportToExcel = () => {\r\n    const monthName = selectedMonth >= 0 && selectedMonth < 12 ? options[selectedMonth + 1] : 'Attendance';\r\n    const year = new Date().getFullYear();\r\n    \r\n    // Prepare data for Excel\r\n    const exportData = attendanceData.map(record => {\r\n      const userAttendance = attendance[record.user_id] || {};\r\n      const row = {\r\n        'User ID': record.user_id,\r\n        'Name': record.name,\r\n        'Month': monthName\r\n      };\r\n      \r\n      // Add attendance for each day\r\n      monthDays.forEach(day => {\r\n        row[`Day ${day}`] = userAttendance[day] || '-';\r\n      });\r\n      \r\n      // Add totals\r\n      const { presentDays, absentDays } = calculateTotals(record.user_id);\r\n      row['Total Present'] = presentDays;\r\n      row['Total Absent'] = absentDays;\r\n      \r\n      return row;\r\n    });\r\n\r\n    // Create worksheet\r\n    const worksheet = XLSX.utils.json_to_sheet(exportData);\r\n    \r\n    // Set column widths\r\n    const colWidths = [\r\n      { wch: 10 }, // User ID\r\n      { wch: 20 }, // Name\r\n      { wch: 15 }, // Month\r\n      ...monthDays.map(() => ({ wch: 8 })), // Days\r\n      { wch: 12 }, // Total Present\r\n      { wch: 12 }  // Total Absent\r\n    ];\r\n    worksheet['!cols'] = colWidths;\r\n    \r\n    // Create workbook and append worksheet\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Attendance');\r\n    \r\n    // Export to file\r\n    const fileName = `Attendance_${name}_${trainerId}_${monthName}_${year}.xlsx`;\r\n    XLSX.writeFile(workbook, fileName);\r\n  };\r\n\r\n  const getAttendanceValue = (userId, day) => {\r\n    return attendance[userId]?.[day] || '';\r\n  };\r\n\r\n  // Calculate totals for a user\r\n  const calculateTotals = (userId) => {\r\n    const userAttendance = attendance[userId] || {};\r\n    const presentDays = Object.values(userAttendance).filter(val => val === 'P').length;\r\n    const absentDays = Object.values(userAttendance).filter(val => val === 'A').length;\r\n    return { presentDays, absentDays };\r\n  };\r\n\r\n  // Handle month change\r\n  const handleMonthChange = (e) => {\r\n    const monthIndex = options.indexOf(e.target.value) - 1; // Convert to 0-11\r\n    setSelectedMonth(monthIndex >= 0 ? monthIndex : new Date().getMonth());\r\n  };\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <Inpage_header \r\n        className=\"text-2xl md:text-3xl font-bold mb-6\" \r\n        title={`PT Attendance of ${name} - ${trainerId}`} \r\n        onExport={handleExportToExcel}\r\n      />\r\n      \r\n      <div className=\"mt-4 flex justify-between items-center\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <h2 className=\"text-xl font-semibold text-gray-100\">\r\n            {currentMonth}\r\n          </h2>\r\n          <select\r\n            value={selectedMonth >= 0 && selectedMonth < 12 ? options[selectedMonth + 1] : options[0]}\r\n            onChange={handleMonthChange}\r\n            className=\"px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-700 text-gray-100\"\r\n          >\r\n            {options.map((option, index) => (\r\n              <option key={index} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <button\r\n          onClick={handleSaveAttendance}\r\n          className={`\r\n            px-4 py-2 text-white rounded \r\n            focus:outline-none focus:ring-2 focus:ring-blue-500\r\n            ${\r\n              saveStatus === 'Saving...'\r\n                ? 'bg-blue-600 cursor-not-allowed'\r\n                : saveStatus === 'Saved'\r\n                ? 'bg-green-500 hover:bg-green-600'\r\n                : saveStatus?.includes('Failed') || saveStatus?.includes('Error')\r\n                ? 'bg-red-500 hover:bg-red-600'\r\n                : 'bg-blue-500 hover:bg-blue-600'\r\n            }\r\n          `}\r\n          disabled={saveStatus === 'Saving...' || selectedMonth < 0}\r\n        >\r\n          {saveStatus || 'Save Attendance'}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"min-w-full bg-gray-700 border border-gray-300 rounded-lg\">\r\n          <thead className=\"bg-[#2B2E32]\">\r\n            <tr>\r\n              <th className=\"py-3 px-4 text-left sticky left-0 bg-[#2B2E32] z-10\">User ID</th>\r\n              <th className=\"py-3 px-4 text-left sticky left-20 bg-[#2B2E32] z-10\">Name</th>\r\n              {monthDays.map(day => {\r\n                const date = new Date(new Date().getFullYear(), selectedMonth, day);\r\n                if (date.getDay() !== 0) { // 0 represents Sunday\r\n                  return (\r\n                    <th key={day} className=\"py-3 px-2 text-center min-w-[60px]\">\r\n                      {day}\r\n                    </th>\r\n                  );\r\n                }\r\n                return null;\r\n              })}\r\n              <th className=\"py-3 px-4 text-center bg-[#2B2E32] z-10\">Total Present</th>\r\n              <th className=\"py-3 px-4 text-center bg-[#2B2E32] z-10\">Total Absent</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody className=\"bg-gray-800 overflow-y-scroll\">\r\n            {loading ? (\r\n              <tr>\r\n                <td colSpan={monthDays.length + 4} className=\"py-3 px-4 text-center text-gray-500\">\r\n                  Loading...\r\n                </td>\r\n              </tr>\r\n            ) : error ? (\r\n              <tr>\r\n                <td colSpan={monthDays.length + 4} className=\"py-3 px-4 text-center text-red-500\">\r\n                  {error}\r\n                </td>\r\n              </tr>\r\n            ) : selectedMonth < 0 ? (\r\n              <tr>\r\n                <td colSpan={monthDays.length + 4} className=\"py-3 px-4 text-center text-gray-500\">\r\n                  Please select a month\r\n                </td>\r\n              </tr>\r\n            ) : attendanceData.length > 0 ? (\r\n              (() => {\r\n                const ptMembers = attendanceData.filter((record) => record.plan_name === \"PT\");\r\n                if (ptMembers.length === 0) {\r\n                  return (\r\n                    <tr>\r\n                      <td colSpan={monthDays.length + 4} className=\"py-3 px-4 text-left text-gray-100\">\r\n                        No member has taken PT under this trainer\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                }\r\n                return ptMembers.map((record) => {\r\n                  const { presentDays, absentDays } = calculateTotals(record.user_id);\r\n\r\n                  return (\r\n                    <tr key={`${record.user_id}-${record.bill_no}`} className=\"border-b hover:bg-gray-900\">\r\n                      <td className=\"py-3 px-4 font-medium sticky left-0 bg-[#2B2E32] z-10 border-r\">\r\n                        {record.user_id}\r\n                      </td>\r\n                      <td className=\"py-3 px-4 font-medium sticky left-20 bg-[#2B2E32] z-10 border-r\">\r\n                        {record.name}\r\n                      </td>\r\n                      {monthDays.map((day) => (\r\n                        <td key={day} className=\"py-2 px-2 text-center\">\r\n                          <select\r\n                            value={getAttendanceValue(record.user_id, day)}\r\n                            onChange={(e) => handleAttendanceChange(record.user_id, day, e.target.value)}\r\n                            className=\"w-full px-1 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                            disabled={selectedMonth < 0}\r\n                          >\r\n                            <option value=\"\">-</option>\r\n                            <option value=\"P\" className=\"text-green-600\">\r\n                              P\r\n                            </option>\r\n                            <option value=\"A\" className=\"text-red-600\">\r\n                              A\r\n                            </option>\r\n                          </select>\r\n                        </td>\r\n                      ))}\r\n                      <td className=\"py-3 px-4 font-medium text-center bg-[#2B2E32] z-10 border-l text-green-400\">\r\n                        {presentDays}\r\n                      </td>\r\n                      <td className=\"py-3 px-4 font-medium text-center bg-[#2B2E32] z-10 border-l text-red-400\">\r\n                        {absentDays}\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                });\r\n              })()\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={monthDays.length + 4} className=\"py-3 px-4 text-center text-gray-500\">\r\n                  No member has taken PT under this trainer\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;AAHA;;;;AAKe,SAAS,kBAAkB,EAAE,SAAS,EAAE,IAAI,EAAE;;IAC3D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACvD,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAC/D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;IAC9C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,OAAO,QAAQ,KAAK,kCAAkC;IAE7G,MAAM,UAAU;QACd;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;uCAAE;YACR,MAAM;yDAAY;oBAChB,IAAI;wBACF,WAAW;wBAEX,iCAAiC;wBACjC,MAAM,kBAAkB,MAAM,MAAM;wBACpC,MAAM,gBAAgB,MAAM,gBAAgB,IAAI;wBAEhD,iCAAiC;wBACjC,MAAM,qBAAqB,MAAM,MAAM;wBACvC,MAAM,mBAAmB,MAAM,mBAAmB,IAAI;wBAEtD,QAAQ,GAAG,CAAC,yBAAyB;wBACrC,QAAQ,GAAG,CAAC,4BAA4B;wBAExC,IAAI,cAAc,OAAO,EAAE;4BACzB,+BAA+B;4BAC/B,MAAM,kBAAkB,cAAc,IAAI,CAAC,MAAM;yFAC/C,CAAC,SAAW,OAAO,OAAO,KAAK;;4BAEjC,QAAQ,GAAG,CAAC,qBAAqB;4BACjC,kBAAkB;4BAElB,2CAA2C;4BAC3C,MAAM,qBAAqB,iBAAiB,IAAI,CAAC,MAAM;4FACrD,CAAC,SAAW,OAAO,UAAU,KAAK;;4BAEpC,QAAQ,GAAG,CAAC,wBAAwB;4BACpC,sBAAsB;wBACxB,OAAO;4BACL,SAAS,cAAc,KAAK,IAAI;wBAClC;oBACF,EAAE,OAAO,KAAK;wBACZ,QAAQ,KAAK,CAAC,wBAAwB;wBACtC,SAAS;oBACX,SAAU;wBACR,WAAW;oBACb;gBACF;;YAEA;QACF;sCAAG;QAAC;KAAU;IAEd,kCAAkC;IAClC,MAAM,eAAe;QACnB,MAAM,MAAM,IAAI;QAChB,MAAM,OAAO,IAAI,WAAW;QAC5B,MAAM,cAAc,IAAI,KAAK,MAAM,gBAAgB,GAAG,GAAG,OAAO;QAEhE,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAY,GAAG,CAAC,GAAG,IAAM,IAAI;IAC3D;IAEA,MAAM,YAAY;IAClB,MAAM,eAAe,iBAAiB,KAAK,gBAAgB,KACvD,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,EAAE,IAAI,OAAO,WAAW,IAAI,GAC3D;IAEJ,kEAAkE;IAClE,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;uCAAE;YACR,IAAI,eAAe,MAAM,GAAG,GAAG;gBAC7B,MAAM,oBAAoB,CAAC;gBAC3B,MAAM,cAAc,IAAI,OAAO,WAAW;gBAC1C,MAAM,kBAAkB,gBAAgB,GAAG,sBAAsB;gBAEjE,kCAAkC;gBAClC,eAAe,OAAO;mDAAC,CAAA;wBACrB,iBAAiB,CAAC,KAAK,OAAO,CAAC,GAAG,CAAC;wBACnC,UAAU,OAAO;2DAAC,CAAA;gCAChB,iBAAiB,CAAC,KAAK,OAAO,CAAC,CAAC,IAAI,GAAG,IAAI,gBAAgB;4BAC7D;;oBACF;;gBAEA,uDAAuD;gBACvD,mBAAmB,OAAO;mDAAC,CAAA;wBACzB,0BAA0B;wBAC1B,MAAM,UAAU,IAAI,KAAK,OAAO,IAAI;wBACpC,MAAM,UAAU,IAAI,KAAK,QAAQ,OAAO,KAAM,MAAM,KAAK,KAAK,OAAQ,wBAAwB;wBAC9F,MAAM,aAAa,QAAQ,WAAW;wBACtC,MAAM,cAAc,QAAQ,QAAQ,KAAK;wBACzC,MAAM,YAAY,QAAQ,OAAO;wBAEjC,8DAA8D;wBAC9D,IAAI,eAAe,eAAe,gBAAgB,iBAAiB;4BACjE,IAAI,iBAAiB,CAAC,OAAO,OAAO,CAAC,EAAE;gCACrC,iBAAiB,CAAC,OAAO,OAAO,CAAC,CAAC,UAAU,GAAG,OAAO,MAAM;4BAC9D;wBACF;oBACF;;gBAEA,cAAc;YAChB;QACF;sCAAG;QAAC;QAAgB;QAAoB;KAAc;IAEtD,2BAA2B;IAC3B,MAAM,yBAAyB,CAAC,QAAQ,KAAK;QAC3C,cAAc,CAAA,OAAQ,CAAC;gBACrB,GAAG,IAAI;gBACP,CAAC,OAAO,EAAE;oBACR,GAAG,IAAI,CAAC,OAAO;oBACf,CAAC,IAAI,EAAE;gBACT;YACF,CAAC;IACH;IAEA,2BAA2B;IAC3B,MAAM,uBAAuB;QAC3B,IAAI;YACF,cAAc;YACd,MAAM,UAAU,EAAE;YAClB,MAAM,OAAO,IAAI,OAAO,WAAW;YACnC,MAAM,QAAQ,CAAC,gBAAgB,CAAC,EAAE,QAAQ,GAAG,QAAQ,CAAC,GAAG;YAEzD,8DAA8D;YAC9D,MAAM,wBAAwB,CAAC;YAC/B,mBAAmB,OAAO,CAAC,CAAA;gBACzB,MAAM,UAAU,IAAI,KAAK,OAAO,IAAI;gBACpC,MAAM,UAAU,IAAI,KAAK,QAAQ,OAAO,KAAM,MAAM,KAAK,KAAK,OAAQ,iBAAiB;gBACvF,MAAM,aAAa,QAAQ,WAAW;gBACtC,MAAM,cAAc,QAAQ,QAAQ,KAAK;gBACzC,MAAM,YAAY,QAAQ,OAAO;gBACjC,IAAI,eAAe,QAAQ,gBAAgB,OAAO,QAAQ;oBACxD,qBAAqB,CAAC,GAAG,OAAO,OAAO,CAAC,CAAC,EAAE,WAAW,CAAC,GAAG,OAAO,MAAM;gBACzE;YACF;YAEA,iDAAiD;YACjD,OAAO,IAAI,CAAC,YAAY,OAAO,CAAC,CAAA;gBAC9B,UAAU,OAAO,CAAC,CAAA;oBAChB,MAAM,SAAS,UAAU,CAAC,OAAO,CAAC,IAAI;oBACtC,MAAM,MAAM,GAAG,OAAO,CAAC,EAAE,KAAK;oBAC9B,MAAM,iBAAiB,qBAAqB,CAAC,IAAI;oBAEjD,gFAAgF;oBAChF,IAAI,CAAC,WAAW,OAAO,WAAW,GAAG,KAAK,WAAW,gBAAgB;wBACnE,MAAM,gBAAgB,GAAG,KAAK,CAAC,EAAE,MAAM,CAAC,EAAE,IAAI,QAAQ,GAAG,QAAQ,CAAC,GAAG,MAAM;wBAC3E,QAAQ,IAAI,CAAC;4BACX,YAAY;4BACZ,SAAS;4BACT,MAAM;4BACN,QAAQ;wBACV;oBACF;gBACF;YACF;YAEA,IAAI,QAAQ,MAAM,KAAK,GAAG;gBACxB,cAAc;gBACd;YACF;YAEA,MAAM,WAAW,MAAM,MAAM,uBAAuB;gBAClD,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBAAE;gBAAQ;YACjC;YAEA,MAAM,SAAS,MAAM,SAAS,IAAI;YAClC,IAAI,OAAO,OAAO,EAAE;gBAClB,cAAc;gBACd,2DAA2D;gBAC3D,sBAAsB,CAAA,OAAQ;2BACzB;2BACA,QAAQ,GAAG,CAAC,CAAA,SAAU,CAAC;gCACxB,YAAY,OAAO,UAAU;gCAC7B,SAAS,OAAO,OAAO;gCACvB,MAAM,OAAO,IAAI;gCACjB,QAAQ,OAAO,MAAM;4BACvB,CAAC;qBACF;YACH,OAAO;gBACL,cAAc,CAAC,QAAQ,EAAE,OAAO,KAAK,EAAE;YACzC;QACF,EAAE,OAAO,OAAO;YACd,cAAc;YACd,QAAQ,KAAK,CAAC,4BAA4B;QAC5C,SAAU;YACR,WAAW,IAAM,cAAc,OAAO;QACxC;IACF;IAEA,yBAAyB;IACzB,MAAM,sBAAsB;QAC1B,MAAM,YAAY,iBAAiB,KAAK,gBAAgB,KAAK,OAAO,CAAC,gBAAgB,EAAE,GAAG;QAC1F,MAAM,OAAO,IAAI,OAAO,WAAW;QAEnC,yBAAyB;QACzB,MAAM,aAAa,eAAe,GAAG,CAAC,CAAA;YACpC,MAAM,iBAAiB,UAAU,CAAC,OAAO,OAAO,CAAC,IAAI,CAAC;YACtD,MAAM,MAAM;gBACV,WAAW,OAAO,OAAO;gBACzB,QAAQ,OAAO,IAAI;gBACnB,SAAS;YACX;YAEA,8BAA8B;YAC9B,UAAU,OAAO,CAAC,CAAA;gBAChB,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,cAAc,CAAC,IAAI,IAAI;YAC7C;YAEA,aAAa;YACb,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,gBAAgB,OAAO,OAAO;YAClE,GAAG,CAAC,gBAAgB,GAAG;YACvB,GAAG,CAAC,eAAe,GAAG;YAEtB,OAAO;QACT;QAEA,mBAAmB;QACnB,MAAM,YAAY,gIAAA,CAAA,QAAU,CAAC,aAAa,CAAC;QAE3C,oBAAoB;QACpB,MAAM,YAAY;YAChB;gBAAE,KAAK;YAAG;YACV;gBAAE,KAAK;YAAG;YACV;gBAAE,KAAK;YAAG;eACP,UAAU,GAAG,CAAC,IAAM,CAAC;oBAAE,KAAK;gBAAE,CAAC;YAClC;gBAAE,KAAK;YAAG;YACV;gBAAE,KAAK;YAAG,EAAG,eAAe;SAC7B;QACD,SAAS,CAAC,QAAQ,GAAG;QAErB,uCAAuC;QACvC,MAAM,WAAW,gIAAA,CAAA,QAAU,CAAC,QAAQ;QACpC,gIAAA,CAAA,QAAU,CAAC,iBAAiB,CAAC,UAAU,WAAW;QAElD,iBAAiB;QACjB,MAAM,WAAW,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE,UAAU,CAAC,EAAE,UAAU,CAAC,EAAE,KAAK,KAAK,CAAC;QAC5E,CAAA,GAAA,gIAAA,CAAA,YAAc,AAAD,EAAE,UAAU;IAC3B;IAEA,MAAM,qBAAqB,CAAC,QAAQ;QAClC,OAAO,UAAU,CAAC,OAAO,EAAE,CAAC,IAAI,IAAI;IACtC;IAEA,8BAA8B;IAC9B,MAAM,kBAAkB,CAAC;QACvB,MAAM,iBAAiB,UAAU,CAAC,OAAO,IAAI,CAAC;QAC9C,MAAM,cAAc,OAAO,MAAM,CAAC,gBAAgB,MAAM,CAAC,CAAA,MAAO,QAAQ,KAAK,MAAM;QACnF,MAAM,aAAa,OAAO,MAAM,CAAC,gBAAgB,MAAM,CAAC,CAAA,MAAO,QAAQ,KAAK,MAAM;QAClF,OAAO;YAAE;YAAa;QAAW;IACnC;IAEA,sBAAsB;IACtB,MAAM,oBAAoB,CAAC;QACzB,MAAM,aAAa,QAAQ,OAAO,CAAC,EAAE,MAAM,CAAC,KAAK,IAAI,GAAG,kBAAkB;QAC1E,iBAAiB,cAAc,IAAI,aAAa,IAAI,OAAO,QAAQ;IACrE;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,sIAAA,CAAA,UAAa;gBACZ,WAAU;gBACV,OAAO,CAAC,iBAAiB,EAAE,KAAK,GAAG,EAAE,WAAW;gBAChD,UAAU;;;;;;0BAGZ,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CACX;;;;;;0CAEH,6LAAC;gCACC,OAAO,iBAAiB,KAAK,gBAAgB,KAAK,OAAO,CAAC,gBAAgB,EAAE,GAAG,OAAO,CAAC,EAAE;gCACzF,UAAU;gCACV,WAAU;0CAET,QAAQ,GAAG,CAAC,CAAC,QAAQ,sBACpB,6LAAC;wCAAmB,OAAO;kDACxB;uCADU;;;;;;;;;;;;;;;;kCAOnB,6LAAC;wBACC,SAAS;wBACT,WAAW,CAAC;;;YAGV,EACE,eAAe,cACX,mCACA,eAAe,UACf,oCACA,YAAY,SAAS,aAAa,YAAY,SAAS,WACvD,gCACA,gCACL;UACH,CAAC;wBACD,UAAU,eAAe,eAAe,gBAAgB;kCAEvD,cAAc;;;;;;;;;;;;0BAInB,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAM,WAAU;;sCACf,6LAAC;4BAAM,WAAU;sCACf,cAAA,6LAAC;;kDACC,6LAAC;wCAAG,WAAU;kDAAsD;;;;;;kDACpE,6LAAC;wCAAG,WAAU;kDAAuD;;;;;;oCACpE,UAAU,GAAG,CAAC,CAAA;wCACb,MAAM,OAAO,IAAI,KAAK,IAAI,OAAO,WAAW,IAAI,eAAe;wCAC/D,IAAI,KAAK,MAAM,OAAO,GAAG;4CACvB,qBACE,6LAAC;gDAAa,WAAU;0DACrB;+CADM;;;;;wCAIb;wCACA,OAAO;oCACT;kDACA,6LAAC;wCAAG,WAAU;kDAA0C;;;;;;kDACxD,6LAAC;wCAAG,WAAU;kDAA0C;;;;;;;;;;;;;;;;;sCAI5D,6LAAC;4BAAM,WAAU;sCACd,wBACC,6LAAC;0CACC,cAAA,6LAAC;oCAAG,SAAS,UAAU,MAAM,GAAG;oCAAG,WAAU;8CAAsC;;;;;;;;;;uCAInF,sBACF,6LAAC;0CACC,cAAA,6LAAC;oCAAG,SAAS,UAAU,MAAM,GAAG;oCAAG,WAAU;8CAC1C;;;;;;;;;;uCAGH,gBAAgB,kBAClB,6LAAC;0CACC,cAAA,6LAAC;oCAAG,SAAS,UAAU,MAAM,GAAG;oCAAG,WAAU;8CAAsC;;;;;;;;;;uCAInF,eAAe,MAAM,GAAG,IAC1B,CAAC;gCACC,MAAM,YAAY,eAAe,MAAM,CAAC,CAAC,SAAW,OAAO,SAAS,KAAK;gCACzE,IAAI,UAAU,MAAM,KAAK,GAAG;oCAC1B,qBACE,6LAAC;kDACC,cAAA,6LAAC;4CAAG,SAAS,UAAU,MAAM,GAAG;4CAAG,WAAU;sDAAoC;;;;;;;;;;;gCAKvF;gCACA,OAAO,UAAU,GAAG,CAAC,CAAC;oCACpB,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,gBAAgB,OAAO,OAAO;oCAElE,qBACE,6LAAC;wCAA+C,WAAU;;0DACxD,6LAAC;gDAAG,WAAU;0DACX,OAAO,OAAO;;;;;;0DAEjB,6LAAC;gDAAG,WAAU;0DACX,OAAO,IAAI;;;;;;4CAEb,UAAU,GAAG,CAAC,CAAC,oBACd,6LAAC;oDAAa,WAAU;8DACtB,cAAA,6LAAC;wDACC,OAAO,mBAAmB,OAAO,OAAO,EAAE;wDAC1C,UAAU,CAAC,IAAM,uBAAuB,OAAO,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK;wDAC3E,WAAU;wDACV,UAAU,gBAAgB;;0EAE1B,6LAAC;gEAAO,OAAM;0EAAG;;;;;;0EACjB,6LAAC;gEAAO,OAAM;gEAAI,WAAU;0EAAiB;;;;;;0EAG7C,6LAAC;gEAAO,OAAM;gEAAI,WAAU;0EAAe;;;;;;;;;;;;mDAXtC;;;;;0DAiBX,6LAAC;gDAAG,WAAU;0DACX;;;;;;0DAEH,6LAAC;gDAAG,WAAU;0DACX;;;;;;;uCA7BI,GAAG,OAAO,OAAO,CAAC,CAAC,EAAE,OAAO,OAAO,EAAE;;;;;gCAiClD;4BACF,CAAC,oBAED,6LAAC;0CACC,cAAA,6LAAC;oCAAG,SAAS,UAAU,MAAM,GAAG;oCAAG,WAAU;8CAAsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUnG;GA3awB;KAAA","debugId":null}},
    {"offset": {"line": 720, "column": 0}, "map": {"version":3,"sources":["file:///D:/codes/Jones-Gym/src/app/%28pages%29/pt-attendance/page.jsx"],"sourcesContent":["'use client';\r\nimport PTAttendanceTable from '@/components/pt_attendance_table';\r\nimport { useSearchParams } from 'next/navigation';\r\n\r\nexport default function PTAttendance() {\r\n  const searchParams = useSearchParams();\r\n  const trainerId = searchParams.get('trainer_id');\r\n  const name = searchParams.get('name');\r\n\r\n  return (\r\n    <div className=\"p-4 md:p-6 lg:p-10\">\r\n      <PTAttendanceTable trainerId={trainerId} name={name} />\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AACA;AACA;;;AAFA;;;AAIe,SAAS;;IACtB,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,YAAY,aAAa,GAAG,CAAC;IACnC,MAAM,OAAO,aAAa,GAAG,CAAC;IAE9B,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC,4IAAA,CAAA,UAAiB;YAAC,WAAW;YAAW,MAAM;;;;;;;;;;;AAGrD;GAVwB;;QACD,qIAAA,CAAA,kBAAe;;;KADd","debugId":null}}]
}